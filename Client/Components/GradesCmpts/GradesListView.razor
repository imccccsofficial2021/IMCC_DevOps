
@inject HttpClient httpClient;
@inject ISnackbar Snackbar;
@using MudBlazorWASM.Client.Components.GradesCmpts
@using MudBlazorWASM.Shared.Models

<h1>e-Grades</h1>

<MudTable HorizontalScrollbar="true" Height="600px" Breakpoint="Breakpoint.Sm" FixedHeader="true" Items="@Elements" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<SubmittedGrade,bool>(FilterFunc1)" 
          @bind-SelectedItem="selectedItem1" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Student grades successfully updated"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch">
    <ToolBarContent>
        <MudText Typo="Typo.caption">Updates as of @DateTime.Now</MudText>
        <MudSpacer />
        <MudText Typo="Typo.caption" Class="align-self-center">Selected Item(s): @selectedItem1?.Offerno, @selectedItem1?.Offerno - @selectedItem1?.Studno</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SubmittedGrade, object>(x=>x.Studno)">No.</MudTableSortLabel></MudTh>
        <MudTh>No.</MudTh>
        <MudTh>Student ID</MudTh>
        <MudTh>Complete Name</MudTh>
        <MudTh>PRELIM</MudTh>
        <MudTh>Midterm</MudTh>
        <MudTh>Semi</MudTh>
        <MudTh>Final</MudTh>
        <MudTh>Ave</MudTh>
        <MudTh>Remarks</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="No.">@context.Submissionid</MudTd>
        <MudTd DataLabel="Student ID">@context.Offerno</MudTd>
        <MudTd DataLabel="Complete Name">@context.Lastname + ", " + @context.Firstname + " " + @context.Mi</MudTd>
        <MudTd DataLabel="Prelim">@context.Prelim</MudTd>
        <MudTd DataLabel="Midterm">@context.Midterm</MudTd>
        <MudTd DataLabel="Semi">@context.Prefinal</MudTd>
        <MudTd DataLabel="Final">@context.Final</MudTd>
        <MudTd DataLabel="Ave">@context.Average</MudTd>
        <MudTd DataLabel="Remarks">@context.Retake</MudTd>
        <MudTd DataLabel="Actions"></MudTd>

    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>@context.Submissionid</MudTd>
        <MudTd>@context.Studno</MudTd>
        <MudTd>@context.Lastname</MudTd>
        <MudTd>@context.Firstname</MudTd>
        <MudTd>@context.Mi</MudTd>
        <MudTd DataLabel="PRELIM">
            <MudTextField @bind-Value="@context.Prelim" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Midterm" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Prefinal" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Final" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Average" Required />
        </MudTd>
        <MudTd>
           <MudTextField @bind-Value="@context.Retake" Required />
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected Item(s): @selectedItem1?.Lastname, @selectedItem1?.Firstname</MudText>
    </div>
</div>

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = false;
    private bool ronly = false;
    private string searchString1 = "";
    private SubmittedGrade selectedItem1 = null!;
    private HashSet<SubmittedGrade> selectedItems = new HashSet<SubmittedGrade>();
    private SubmittedGrade? elementBeforeEdit;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private double ComputedFinalGrades;

    private IEnumerable<SubmittedGrade> Elements = new List<SubmittedGrade>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<SubmittedGrade>>("api/grades/GetAllGrades");        
        dense = true;
        hover = true;

    }

    private bool FilterFunc1(SubmittedGrade element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SubmittedGrade element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Offerno.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Studno.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Offerno} {element.Studno}".Contains(searchString))
            return true;
        return false;
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Prelim = ((SubmittedGrade)element).Prelim,
                Midterm = ((SubmittedGrade)element).Midterm,
                Prefinal = ((SubmittedGrade)element).Prefinal,
                Final = ((SubmittedGrade)element).Final,
                Average = ((SubmittedGrade)element).Average,
                Retake = ((SubmittedGrade)element).Retake
    };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((SubmittedGrade)element).Studno}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((SubmittedGrade)element).Studno} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((SubmittedGrade)element).Prelim = elementBeforeEdit?.Prelim;
        ((SubmittedGrade)element).Midterm = elementBeforeEdit?.Midterm;
        ((SubmittedGrade)element).Prefinal = elementBeforeEdit?.Prefinal;
        ((SubmittedGrade)element).Final = elementBeforeEdit?.Final;
        ((SubmittedGrade)element).Average = elementBeforeEdit?.Average;
        ((SubmittedGrade)element).Retake = elementBeforeEdit?.Retake;

        AddEditionEvent($"RowEditCancel event: Editing of Element {((SubmittedGrade)element).Studno} cancelled");
    }

}