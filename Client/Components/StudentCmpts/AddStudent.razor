@page "/addstudent"
@page "/addstudent/{id:int}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@using MudBlazorWASM.Client.Services
@inject HttpClient httpClient;
@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager



<h3>Create Subject</h3>

<EditForm Model="@model" OnValidSubmit="Save1">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
            <MudCard>
            <MudCardContent>
                    <MudTextField T="int" Label="Student ID" 
                    @bind-Value="model.Studno" For="@(() => model.Studno)" />

                    <MudTextField T="string" Label="Last Name" 
                    @bind-Value="model.Lastname" For="@(() => model.Lastname)"/>

                    <MudTextField T="string" Label="First name" 
                    @bind-Value="model.Firstname" For="@(() => model.Firstname)"/>


            </MudCardContent>
            <MudCardActions>
             <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"  >Save New Student</MudButton>
             </MudCardActions>  
       </MudCard>
           
           
     </MudItem>
           @*<MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success"  Class="ml-auto">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                    
                </MudText>
            }
        </MudPaper>
    </MudItem>*@ 
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    [Parameter]
    public int? Id{ get; set; }

    string Save = string.Empty;

    Student model = new Student {};
    bool success;

    //  public  class StudentList1
    //  {
    //    [Required]
    //    public int  ID { get; set; }
    //    [Required]
    ///    public int COURSENO { get; set; }
    ///    [Required]
    //    public string  COURSEDESC { get; set; }
    //    [Required]
    //    public int  CREDITS { get; set; }
    //     [Required]
    //    public string  Enrollments { get; set; }
    //};

    async Task Save1()
    {
         if(Id == null)
        {
             await StudentService.CreateStudent(model);
           Snackbar.Add("Student Saved", Severity.Success);
        } 
    }





}