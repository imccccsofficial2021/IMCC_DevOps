@page "/editsubject"
@page "/editsubject/{id:int}"

@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@using MudBlazorWASM.Client.Services
@inject HttpClient httpClient;
@inject ISubjectService subjectservice
@inject ISnackbar Snackbar
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager



<EditForm Model="@model" OnValidSubmit="Update" >
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
            <MudCard>
            <MudCardContent>
                    <MudTextField T="string" Label="Code" 
                    @bind-Value="model.Coursecode" For="@(() => model.Coursecode)" />

                    <MudTextField T="string" Label="Description" 
                    @bind-Value="model.Coursedesc" For="@(() => model.Coursedesc)"/>

                    <MudTextField T="int" Label="Lab Units" 
                    @bind-Value="model.Lab" For="@(() => model.Lab)"/>

                    <MudTextField T="int" Label="Lec Units" 
                    @bind-Value="model.Lec" For="@(() => model.Lec)"/>

                    <MudTextField T="int" Label="Total Units" 
                    @bind-Value="model.Units" For="@(() => model.Units)"/>

                    <MudTextField T="string" Label="Category" 
                    @bind-Value="model.Category" For="@(() => model.Category)" />

                    <MudTextField T="string" Label="Status" 
                    @bind-Value="model.Status" For="@(() => model.Status)"/>

                    <MudTextField T="int" Label="Semester" 
                    @bind-Value="model.Semester" For="@(() => model.Semester)"/>

                    <MudTextField T="string" Label="YearLevel" 
                    @bind-Value="model.Yrlevel" For="@(() => model.Yrlevel)"/>

                    <MudTextField T="string" Label="Type" 
                    @bind-Value="model.Tyype" For="@(() => model.Tyype)"/>                                       

            </MudCardContent>
            <MudCardActions>

             <MudButton  ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
             <MudButton  @onclick="@(()=>Delete(Convert.ToInt32(@model.Coursecode)))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Remove"Color="Color.Error">Remove</MudButton>
             </MudCardActions>  
       </MudCard>

     </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    [Parameter]
    public int? Id{ get; set; }

    string Save = string.Empty;

    Subject model = new Subject  {};
    bool success;

    public  class SubjectList
    {
        [Required]
        public int  Code { get; set; }
        [Required]
        public string Desc { get; set; }
        [Required]
        public string  Lab { get; set; }
        [Required]
        public int  Lec { get; set; }
        [Required]
        public int Units { get; set; }
        [Required]
        public string Category { get; set; }
        [Required]
        public int  Status { get; set; }
        [Required]
        public string Prereq { get; set; }
        [Required]
        public string  Deptno { get; set; }
        [Required]
        public int  Semester { get; set; }
        [Required]
        public int Semcode { get; set; }
        [Required]
        public string YrLvl { get; set; }
        public int  Courseno { get; set; }
        [Required]
        public int Type { get; set; }

    };


    protected override async Task OnParametersSetAsync()
    {

        model = await subjectservice.GetCourseNo((int) Id);
    }

    async Task Delete(int corsCode)
    {
        
        await subjectservice.DeleteSubject(corsCode);
        Snackbar.Add("Subject Deleted", Severity.Warning);
    }
    async Task Update()
    {
          success = true;
          await subjectservice.UpdateAllSubjects(model);
          Snackbar.Add("Subject Updated", Severity.Success);
       
    }





}